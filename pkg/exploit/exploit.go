package exploit

import (
	"Yasso/core/logger"
	"Yasso/pkg/exploit/config"
	"Yasso/pkg/exploit/ldap"
	"Yasso/pkg/exploit/mssql"
	"Yasso/pkg/exploit/redis"
	"Yasso/pkg/exploit/ssh"
	"Yasso/pkg/exploit/sunlogin"
	"Yasso/pkg/exploit/winrm"

	"github.com/spf13/cobra"
)

type ExpFlags struct {
	Hostname string
	Port     int
	User     string
	Pass     string
	KeyFile  string
	Rebound  string
	Command  string
	Method   int    // Sub-method for each Exp
	Listen   string // Local listening address
	SoPath   string // Path to .so file
	Filter   string // LDAP filter
	LdapCmd  bool   // Display LDAP query commands
	LdapAll  bool   // Whether to automatically query LDAP
	LdapName string // LDAP name attribute
}

var mssqlFlag ExpFlags
var MssqlCmd = &cobra.Command{
	Use:   "mssql",
	Short: "Quick attacks on MSSQL services",
	Run: func(cmd *cobra.Command, args []string) {
		if mssqlFlag.Hostname == "" {
			_ = cmd.Help()
			return
		}
		switch mssqlFlag.Method {
		case 1:
			mssql.ExploitMssql(config.Exploits{
				Hostname: mssqlFlag.Hostname,
				Port:     mssqlFlag.Port,
				User:     mssqlFlag.User,
				Pass:     mssqlFlag.Pass,
			}, 1, mssqlFlag.Command)
		case 2:
			mssql.ExploitMssql(config.Exploits{
				Hostname: mssqlFlag.Hostname,
				Port:     mssqlFlag.Port,
				User:     mssqlFlag.User,
				Pass:     mssqlFlag.Pass,
			}, 2, mssqlFlag.Command)
		case 3:
			mssql.ExploitMssql(config.Exploits{
				Hostname: mssqlFlag.Hostname,
				Port:     mssqlFlag.Port,
				User:     mssqlFlag.User,
				Pass:     mssqlFlag.Pass,
			}, 3, mssqlFlag.Command)
		case 4:
			mssql.ExploitMssql(config.Exploits{
				Hostname: mssqlFlag.Hostname,
				Port:     mssqlFlag.Port,
				User:     mssqlFlag.User,
				Pass:     mssqlFlag.Pass,
			}, 4, mssqlFlag.Command)
		default:
			logger.Fatal("not found exploit method")
			return
		}
	},
}

var sshFlag ExpFlags
var SshCmd = &cobra.Command{
	Use:   "ssh",
	Short: "Quick attacks on SSH services",
	Run: func(cmd *cobra.Command, args []string) {
		if sshFlag.Hostname == "" {
			_ = cmd.Help()
			return
		}
		ssh.ExploitSSH(config.Exploits{
			Hostname: sshFlag.Hostname,
			Port:     sshFlag.Port,
			User:     sshFlag.User,
			Pass:     sshFlag.Pass,
		}, sshFlag.KeyFile)
	},
}

var winrmFlag ExpFlags
var WinRmCmd = &cobra.Command{
	Use:   "winrm",
	Short: "Quick attacks on WinRM services",
	Run: func(cmd *cobra.Command, args []string) {
		if winrmFlag.Hostname == "" {
			_ = cmd.Help()
			return
		}
		winrm.ExploitWinRM(config.Exploits{
			Hostname: winrmFlag.Hostname,
			Port:     winrmFlag.Port,
			User:     winrmFlag.User,
			Pass:     winrmFlag.Pass,
		}, winrmFlag.Command, winrmFlag.Method)
	},
}

var redisFlag ExpFlags
var RedisCmd = &cobra.Command{
	Use:   "redis",
	Short: "Quick attacks on Redis services",
	Run: func(cmd *cobra.Command, args []string) {
		if redisFlag.Hostname == "" {
			_ = cmd.Help()
			return
		}
		redis.ExploitRedis(config.Exploits{
			Hostname: redisFlag.Hostname,
			Port:     redisFlag.Port,
			User:     "",
			Pass:     redisFlag.Pass,
		}, redisFlag.Method, redisFlag.Rebound, redisFlag.KeyFile, redisFlag.Listen, "")
	},
}

var sunLoginFlag ExpFlags
var SunLoginCmd = &cobra.Command{
	Use:   "sunlogin",
	Short: "Quick attacks on SunLogin services (RCE)",
	Run: func(cmd *cobra.Command, args []string) {
		if sunLoginFlag.Hostname == "" {
			_ = cmd.Help()
			return
		}
		if sunLoginFlag.Port == 0 {
			logger.Fatal("input sunlogin port")
			return
		} else {
			sunlogin.ExploitSunLogin(config.Exploits{
				Hostname: sunLoginFlag.Hostname,
				Port:     sunLoginFlag.Port,
				User:     "",
				Pass:     "",
			}, sunLoginFlag.Command)
		}
	},
}

var LdapReaperFlag ExpFlags

var LdapReaperCmd = &cobra.Command{
	Use:   "ldap",
	Short: "ldap single query with filter and fast automatic query",
	Run: func(cmd *cobra.Command, args []string) {
		if LdapReaperFlag.Hostname == "" || LdapReaperFlag.User == "" {
			_ = cmd.Help()
			return
		}
		if LdapReaperFlag.LdapCmd == true {
			ldap.ListLdapCommand()
			return
		} else {
			if LdapReaperFlag.Command != "" {
				LdapReaperFlag.LdapAll = false
			}
			ldap.LdapAuthAndQuery(LdapReaperFlag.Hostname, LdapReaperFlag.User, LdapReaperFlag.Pass, LdapReaperFlag.Command, LdapReaperFlag.Filter, LdapReaperFlag.LdapName, LdapReaperFlag.LdapAll)
		}
	},
}

func init() {
	MssqlCmd.Flags().StringVar(&mssqlFlag.Hostname, "host", "", "Set MSSQL connection host address")
	MssqlCmd.Flags().StringVar(&mssqlFlag.Command, "cmd", "", "System command to execute")
	MssqlCmd.Flags().IntVar(&mssqlFlag.Port, "port", 1433, "Set MSSQL connection host port")
	MssqlCmd.Flags().StringVar(&mssqlFlag.User, "user", "sa", "Set connection username")
	MssqlCmd.Flags().StringVar(&mssqlFlag.Pass, "pass", "", "Set connection password")
	MssqlCmd.Flags().IntVar(&mssqlFlag.Method, "method", 1, "Set exploit method (.eg)\n[1][xp_cmdshell]\n[2][sp_oacreate]\n[3][install SharpSQLKit]\n[4][uninstall SharpSQLKit]")
	SshCmd.Flags().StringVar(&sshFlag.Hostname, "host", "", "Set SSH connection host address")
	SshCmd.Flags().StringVar(&sshFlag.KeyFile, "key", "", "Set SSH connection key")
	SshCmd.Flags().StringVar(&sshFlag.User, "user", "root", "Set connection username")
	SshCmd.Flags().StringVar(&sshFlag.Pass, "pass", "", "Set connection password")
	SshCmd.Flags().IntVar(&sshFlag.Port, "port", 22, "Set SSH connection port")
	RedisCmd.Flags().StringVar(&redisFlag.Hostname, "host", "", "Set Redis host connection address")
	RedisCmd.Flags().StringVar(&redisFlag.Rebound, "rebound", "", "Set Redis scheduled reverse shell address")
	RedisCmd.Flags().StringVar(&redisFlag.KeyFile, "key", "", "Set local file path for Redis public key writing")
	RedisCmd.Flags().StringVar(&redisFlag.Listen, "listen", "127.0.0.1:8888", "Set Redis master-slave service local listening")
	RedisCmd.Flags().StringVar(&redisFlag.Pass, "pass", "", "Set Redis connection password")
	RedisCmd.Flags().StringVar(&redisFlag.SoPath, "so", "", "Set path to other .so files")
	RedisCmd.Flags().IntVar(&redisFlag.Port, "port", 6379, "Set Redis connection port")
	RedisCmd.Flags().IntVar(&redisFlag.Method, "method", 1, "Set exploit method (.eg)\n[1][Redis scheduled reverse shell]\n[2][Redis public key writing]\n[3][Redis master-slave replication RCE (requires target host to be able to access service startup host)]")
	WinRmCmd.Flags().StringVar(&winrmFlag.Hostname, "host", "", "Set WinRM connection host")
	WinRmCmd.Flags().StringVar(&winrmFlag.User, "user", "administrator", "Set WinRM connection user")
	WinRmCmd.Flags().StringVar(&winrmFlag.Pass, "pass", "", "Set WinRM connection password")
	WinRmCmd.Flags().StringVar(&winrmFlag.Command, "cmd", "whoami", "Set WinRM command to execute")
	WinRmCmd.Flags().IntVar(&winrmFlag.Port, "port", 5985, "Set WinRM connection port")
	WinRmCmd.Flags().IntVar(&winrmFlag.Method, "method", 1, "Set exploit method (.eg)\n[1][WinRM single command execution, use with cmd parameter]\n[2][WinRM forward shell execution]")
	SunLoginCmd.Flags().StringVar(&sunLoginFlag.Hostname, "host", "", "Set SunLogin host address")
	SunLoginCmd.Flags().IntVar(&sunLoginFlag.Port, "port", 0, "Set SunLogin port")
	SunLoginCmd.Flags().StringVar(&sunLoginFlag.Command, "cmd", "whoami", "Set system command")
	LdapReaperCmd.Flags().StringVar(&LdapReaperFlag.Hostname, "dc", "", "Set DC hostname (FQDN)")
	LdapReaperCmd.Flags().StringVar(&LdapReaperFlag.User, "user", "", "Set domain username (.eg)[KLION\\Oadmin]")
	LdapReaperCmd.Flags().StringVar(&LdapReaperFlag.Pass, "pass", "", "Set domain user password")
	LdapReaperCmd.Flags().StringVar(&LdapReaperFlag.Filter, "filter", "full-data", "Set filter, usually full-data")
	LdapReaperCmd.Flags().StringVar(&LdapReaperFlag.Command, "cmd", "", "Set query command, can be viewed through ldap-cmd")
	LdapReaperCmd.Flags().BoolVar(&LdapReaperFlag.LdapCmd, "ldap-cmd", false, "List available LDAP query commands")
	LdapReaperCmd.Flags().BoolVar(&LdapReaperFlag.LdapAll, "ldap-all", true, "Whether to use automatic LDAP query (will query default LDAP information)")
	LdapReaperCmd.Flags().StringVar(&LdapReaperFlag.LdapName, "name", "", "Domain (member, group, computer) name")
}
